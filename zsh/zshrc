# filename: $HOME/.zshrc

# Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
_comp_files=(${ZDOTDIR:-$HOME}/.zcompdump(Nm-20))
if (( $#_comp_files )); then
  compinit -i -C
else
  compinit -i
fi
unset _comp_files

export ZPLUG_HOME=/usr/local/opt/zplug
source $ZPLUG_HOME/init.zsh

## - User Plugins - - - - - - - - - - - - - - # 
zplug "zsh-users/zsh-history-substring-search"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-autosuggestions"
zplug "tysonwolker/iterm-tab-colors"
fpath=(/usr/local/share/zsh-completions $fpath)
zplug "skywind3000/z.lua"
zplug "paulmelnikow/zsh-startup-timer"
zplug "tysonwolker/iterm-tab-colors"
zplug "desyncr/auto-ls"
zplug "momo-lab/zsh-abbrev-alias"
zplug "rawkode/zsh-docker-run"
zplug "arzzen/calc.plugin.zsh"
zplug "peterhurford/up.zsh"
zplug "jimeh/zsh-peco-history"

#>- OMZ Plugins
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/github", from:oh-my-zsh
# zplug "plugins/heroku", from:oh-my-zsh
zplug "plugins/lein", from:oh-my-zsh
zplug "plugins/command-not-found", from:oh-my-zsh
# zplug "plugins/autojump", from:oh-my-zsh
zplug "plugins/complest", from:oh-my-zsh
zplug "plugins/ssh-agent", from:oh-my-zsh

#>- Language Plugins
zplug "plugins/node", from:oh-my-zsh
zplug "plugins/python", from:oh-my-zsh
zplug "plugins/ruby", from:oh-my-zsh
zplug "lib/clipboard", from:oh-my-zsh
zplug "oz/safe-paste"

#>- Syntax Highlighting
zplug "zsh-users/zsh-syntax-highlighting", defer:2

#>- Themes
#zplug denysdovhan/spaceship-prompt, use:spaceship.zsh, from:github, as:theme
zplug 'themes/trapd00r', from:oh-my-zsh
#zplug "bhilburn/powerlevel9k", use:powerlevel9k.zsh-theme

if ! zplug check --verbose ; then
  printf "Install? [y/N]: "
  if read -q ; then
    echo ; zplug install
  fi
fi

zplug load

#>- asdf
. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash

#>- the fuck
eval "$(thefuck --alias)"

#>- Executable Paths
export PATH=$HOME/.bin:/usr/local/bin:$HOME/usr/local/bin:$PATH

#>- Development 
GIT_AUTHOR_NAME="Joshua Marcum"
GIT_AUTHOR_EMAIL="coderevol@icloud.com"
GIT_COMMITTER_NAME="Joshua Marcum"
GIT_COMMITTER_DATE="$(date +%y%m%d-%H%M)"
GIT_EDITOR="nvim"

SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk
MACOSX_DEPLOYMENT_TARGET=10.14 

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh ]] && . /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh ]] && . /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/sls.zsh
# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[[ -f /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh ]] && . /usr/local/lib/node_modules/serverless/node_modules/tabtab/.completions/slss.zsh

eval "$(direnv hook zsh)"
# file: $HOME/.envrc

# > Development
function createUpJSON() {
OUTPUT_FILE="./up.json"
if [[ -f "$OUTPUT_FILE" ]]; then
  echo "File already exists. Operation aborted!"
  exit 1
fi

echo "Writing ./up.json file..." 
echo '{' >> $OUTPUT_FILE
echo '"name": "$MYAWS_NAME",' >> $OUTPUT_FILE
echo '"profile": "$MYAWS_PROFILE",' >> $OUTPUT_FILE
echo '"regions": ["$MYAWS_REGIONS"]' >> $OUTPUT_FILE
echo '}' >> $OUTPUT_FILE
if cat ./up.json ; then
  echo "Wrote successfully"
else
  echo "Failed to write up.json"
fi
}

function createUpProject() {
local UP_NEW=$1
IFS='' read -r -d JSON_OUTPUT = <<"EOF"
{
  "name": "$MYAWS_NAME",
  "profile": "$MYAWS_PROFILE",
  "regions": ["$MYAWS_REGIONS"]
}
EOF

IFS='' read -r -d ENV_OUTPUT = <<"EOF"
# AWS 
export MYAWS_NAME=""      # App Name:     fireLlama-api
export MYAWS_PROFILE=""   # Company Name: bubblicon
export MYAWS_REGIONS=""   # Regions:      us-east-1
EOF

local FILE_JSON="./$UP_NEW/up.json"
local FILE_ENV="./$UP_NEW/.envrc"
echo $JSON_OUTPUT >> $FILE_JSON && \
echo $ENV_OUTPUT >> $FILE_ENV && \
echo "Created project: $1, Enter AWS details: ./$1/.envrc" && \
echo "Required Dependencies: direnv"
}

function _notify() {

}
function maven_servletSetup() {
# Variables: Default Definitions
local MVN_DAID="webapp"
local MVN_DGID="io.vengent.webapp"
local MVN_DVER="1.0-SNAPSHOT"
# Variables: User Definitions
local MVN_AID="$2"
local MVN_GID="$1"
local MVN_VER="$3" 

printf '%s\n' "[ $NTF_TYPE ] [ $NTF_MSG ]"

mvn archetype:generate -DgroupId=$MVN_GID -DartifactId=$MVN_AID -Dversion=$MVN_VER \
  -DarchetypeGroupId=com.amazonaws.serverless.archetypes \
  -DarchetypeArtifactId=aws-serverless-jersey-archetype \
  -DarchetypeVersion=1.0.1 -Dinteractive=false
}

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

